basePath: /api/
definitions:
  entity.GetUserReq:
    properties:
      user_id:
        type: string
      user_login:
        type: string
    type: object
  entity.SendProposalReq:
    properties:
      description:
        type: string
      reason:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  entity.SendProposalResp:
    properties:
      proposal_description:
        type: string
      proposal_id:
        type: string
      proposal_reason:
        type: string
      proposal_title:
        type: string
    type: object
  entity.User:
    properties:
      cred:
        $ref: '#/definitions/entity.UserCred'
      info:
        $ref: '#/definitions/entity.UserCommonInfo'
    type: object
  entity.UserCommonInfo:
    properties:
      birthday:
        type: string
      email:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/entity.UserRole'
    required:
    - email
    - name
    type: object
  entity.UserCred:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  entity.UserRole:
    enum:
    - admin
    - service
    - person
    type: string
    x-enum-varnames:
    - Admin
    - Service
    - Person
  http.ErrForResp:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  http.Resp-entity_SendProposalResp:
    properties:
      message:
        type: string
      meta:
        type: string
      result:
        $ref: '#/definitions/entity.SendProposalResp'
    type: object
  http.Resp-entity_UserCommonInfo:
    properties:
      message:
        type: string
      meta:
        type: string
      result:
        $ref: '#/definitions/entity.UserCommonInfo'
    type: object
  http.RespErr:
    properties:
      error:
        $ref: '#/definitions/http.ErrForResp'
      meta:
        type: string
    type: object
info:
  contact:
    email: kalinindima123@yandex.ru
    name: Dima Kalinin
    url: https://dimdimi4-and-fixiki.github.io/dima-portal/
  description: Service for sending notifications to users
  title: Notifier API
  version: 0.0.1
paths:
  /admin/get_user/:
    post:
      consumes:
      - application/json
      description: Return user by user id or user login
      parameters:
      - description: no_comm
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.GetUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.RespErr'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.RespErr'
      summary: get user info
      tags:
      - Admin
  /admin/register_user/:
    post:
      consumes:
      - application/json
      description: Register new user with user details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Resp-entity_UserCommonInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.RespErr'
      summary: Register new user
      tags:
      - Admin
  /v1/send_proposal/:
    post:
      consumes:
      - application/json
      description: Sends message via email to owner of project and confirmation to
        user's email
      parameters:
      - description: no_comm
        in: body
        name: proposal
        required: true
        schema:
          $ref: '#/definitions/entity.SendProposalReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.RespErr'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.RespErr'
      summary: send proposal notification by email
      tags:
      - v1
swagger: "2.0"
